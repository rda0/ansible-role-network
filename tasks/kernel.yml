- name: register kernel modules for load at boot
  blockinfile:
    dest: /etc/modules
    # {name: foo, modules: [ bar, baz ]} -> [[ bar, baz ]] -> [ bar, baz ] -> "bar\n\baz"
    block: "{{ _network_kernel_module_sets | selectattr('name','==', module_set_name) | map(attribute='modules') | flatten | join('\n') }}"
  loop:
    "{{ network_kernel_module_sets }}"
  loop_control:
    loop_var: module_set_name

- name: load kernel modules
  community.general.modprobe:
    name: "{{ module_name }}"
  loop:
    # {name: foo, modules: [ bar, baz ]} -> [[ bar, baz ]] -> [ bar, baz ]
    "{{ _network_kernel_module_sets | selectattr('name', 'in', network_kernel_module_sets) | map(attribute='modules') | flatten }}"
  loop_control:
    loop_var: module_name

- name: set fact _network_kernel_settings
  set_fact:
    _network_kernel_settings: '{{ network_kernel_settings_defaults | combine(network_kernel_settings_group, recursive=True) | combine(network_kernel_settings, recursive=True) }}'

- name: apply sysctl kernel settings
  ansible.posix.sysctl:
    sysctl_file: '{{ network_kernel_settings_file }}'
    name: '{{ item.value.name | default(item.key) }}'
    value: '{{ item.value.value }}'
    state: "{{ 'present' if item.value.value != item.value.default | default(None) else 'absent' }}"
    sysctl_set: "{{ True if item.value.value != item.value.default | default(None) else False }}"
    reload: no
  loop: '{{ _network_kernel_settings | dict2items }}'
