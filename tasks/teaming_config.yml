# We need to dynamically create a dict from network_team.interfaces:
#
#    { "_network_team_ports": { "eno1": {}, "eno2": {} } }
#
# afterwards this is merged into the teaming config, see the jinja template.

- name: clear port list
  set_fact:
    _network_team_ports: {}    # clear from previous loops
    _network_team_config_file: "/etc/teamd/{{ network_team.name }}.conf"
    _network_team_service: "teamd-{{ network_team.name }}"

- name: dynamically generate port configuration
  set_fact:
    _network_team_ports: "{{ _network_team_ports | combine({item: {}}) }}"
  loop:
    "{{ network_team.interfaces }}"

- name: merge extra port configuration
  set_fact:
    _network_team_ports: "{{ _network_team_ports | combine(network_team.interfaces_extra) }}"
  when: network_team.interfaces_extra is defined

- name: create /etc/teamd
  file:
    path: /etc/teamd
    state: directory
    owner: root
    group: root
    mode: 0755

- name: "deploy teaming configuration ({{ _network_team_config_file }})"
  template:
    dest: "{{ _network_team_config_file }}"
    src: teamd.conf.j2
    owner: root
    group: root
    mode: 0644
  register: _network_deploy_teaming_config

- name: "deploy systemd {{ _network_team_service }} service"
  template:
    src: teamd.service.j2
    dest: "/etc/systemd/system/{{ _network_team_service }}.service"
    mode: 0644
  register: _network_deploy_teaming_service

- name: "enable systemd {{ _network_team_service }} service"
  systemd:
    name: "{{ _network_team_service }}"
    enabled: yes
    #state: started   do not start the daemon yet
    daemon_reload: yes
  register: _network_enable_teaming_service
  ignore_errors: "{{ ansible_check_mode }}"  # ignore errors in check mode

- name: create /etc/systemd/system/systemd-networkd.service.d
  file:
    path: /etc/systemd/system/systemd-networkd.service.d
    state: directory
    owner: root
    group: root
    mode: 0755

- name: "create systemd-networkd override (systemd-networkd.service.d/{{ _network_team_service }}.conf)"
  template:
    src: systemd-networkd.service.override.j2
    dest: "/etc/systemd/system/systemd-networkd.service.d/{{ _network_team_service }}.conf"
    mode: 0644
  register: _network_networkd_override

- name: "reload systemd daemon (systemd-networkd.service.d/{{ _network_team_service }}.conf)"
  systemd:
    daemon_reload: yes
  when: _network_networkd_override.changed

# register teamd for a later (re)start, if one of the following holds:
#   teaming config changed
#   teaming service definition changed
#   teaming service definition is new
- name: "schedule restart of {{ _network_team_service }}.service"
  set_fact:
    _network_restart_team_service: "{{ _network_restart_team_service + [_network_team_service] }}"
  when: _network_deploy_teaming_config.changed or _network_deploy_teaming_service.changed or _network_enable_teaming_service.changed
